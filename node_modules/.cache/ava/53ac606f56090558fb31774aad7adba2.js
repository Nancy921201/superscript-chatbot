'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * test
 */

const test = require('ava');
const engineBot = require('./chat.engine');

var userId = '0001';

test.only('Test DirectReply', (() => {
    var _ref = _asyncToGenerator(function* (t) {
        yield engineBot.init();
        let topic1 = {};
        let topic2 = {};
        topic1.Question1 = yield engineBot.reply(userId, '@_t1_topic1_kickoff_@');
        topic1.Question2 = yield engineBot.reply(userId, 'topic1 answer1');
        topic1.Question3 = yield engineBot.reply(userId, 'topic1 answer2');
        topic2.Question2 = yield engineBot.directReply(userId, 't2', '__T2Q2');
        topic2.Question3 = yield engineBot.reply(userId, 'topic2 answer2');
        console.log('topic1.Question1: ', topic1.Question1.response.string);
        console.log('topic1.Question2: ', topic1.Question2.response.string);
        console.log('topic1.Question3: ', topic1.Question3.response.string);
        console.log('topic2.Question2: ', topic2.Question2.response.string);
        console.log('topic2.Question3: ', topic2.Question3.response.string);
    });

    return function (_x) {
        return _ref.apply(this, arguments);
    };
})());
//# sourceMappingURL=node_modules/.cache/ava/53ac606f56090558fb31774aad7adba2.js.map